**파이썬 기초

변수: 값을 저장하는 메모리 공간

자료형
리스트: 순서가 있는 집합, 수정가능, 중복허용	[ ]
튜플: 순서가 있는 집합, 수정불가, 중복허용	( )
딕셔너리: 키-값 쌍의 집합, 키는 중복 불가	{ }

조건문
if, elif, else

반복문
for: 정해진 횟수 반복
while: 조건식이 참일 때 반복

함수
기본함수: def로 정의
람다함수: lamda x: x*2 (단일 표현식 함수)
내장함수: 파이썬에서 기본으로 제공하는 함수

메서드
...

예외처리
try: 예외검사 코드
except: 예외 발생시 실행하는 코드
finally: 예외 발생여부와 무관하게 항상 실행하는 코드

변수 만드는 규칙
-대소문자 구분
-숫자로 시작 불가
-파이썬 키워드 사용불가
-명확하고 의미있는 이름 사용


Q) 딕셔너리는 key와 value로 이루어져 있는데, 이는 json과 유사한 형태
    그럼 서로 연관이 있을까?
//딕셔너리, json 변환 예제
https://jsikim1.tistory.com/220


난이도를 살짝 올린 파이썬 리스트, 튜플, 딕셔너리에 대한 예제 문제를 준비했습니다. 각 문제는 조금 더 복잡한 로직을 요구하거나 여러 가지 개념을 결합해서 해결할 수 있습니다.

1. 리스트 관련 문제
문제 1: 주어진 리스트에서 중복된 요소를 제거한 새로운 리스트를 반환하는 프로그램을 작성하세요.

python
코드 복사
numbers = [1, 2, 3, 4, 4, 5, 2, 6, 1]
문제 2: 주어진 리스트에서 홀수만 골라서 새로운 리스트로 반환하세요.

python
코드 복사
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
문제 3: 주어진 리스트의 각 요소를 제곱한 값을 가진 새로운 리스트를 반환하는 프로그램을 작성하세요.

python
코드 복사
numbers = [2, 3, 4, 5]
문제 4: 주어진 리스트에서 특정 값이 있는지 확인하는 프로그램을 작성하세요. (값은 3이라고 가정)

python
코드 복사
numbers = [10, 20, 30, 40, 50]
문제 5: 주어진 리스트에서 두 번째로 큰 값을 구하는 프로그램을 작성하세요.

python
코드 복사
numbers = [5, 12, 7, 9, 15, 10]
2. 튜플 관련 문제
문제 1: 주어진 튜플에서 짝수만 골라 새로운 튜플을 반환하는 프로그램을 작성하세요.

python
코드 복사
numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
문제 2: 주어진 튜플에서 요소들의 합을 구하는 프로그램을 작성하세요.

python
코드 복사
numbers = (5, 10, 15, 20)
문제 3: 주어진 튜플에서 각 요소를 문자열로 변환하여 새로운 튜플을 반환하는 프로그램을 작성하세요.

python
코드 복사
numbers = (1, 2, 3, 4)
문제 4: 주어진 튜플에서 특정 값이 몇 번째 인덱스에 있는지 반환하는 프로그램을 작성하세요. (값은 7이라고 가정)

python
코드 복사
numbers = (2, 4, 6, 7, 8)
문제 5: 두 개의 튜플을 합쳐 하나의 튜플을 만드는 프로그램을 작성하세요.

python
코드 복사
tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
3. 딕셔너리 관련 문제
문제 1: 주어진 딕셔너리에서 특정 키가 존재하는지 확인하는 프로그램을 작성하세요. (키는 age)

python
코드 복사
person = {'name': 'Alice', 'age': 25, 'city': 'New York'}
문제 2: 주어진 딕셔너리에서 모든 키의 목록을 출력하는 프로그램을 작성하세요.

python
코드 복사
person = {'name': 'Alice', 'age': 25, 'city': 'New York'}
문제 3: 두 개의 딕셔너리를 합쳐서 하나의 딕셔너리를 만드는 프로그램을 작성하세요.

python
코드 복사
person1 = {'name': 'Alice', 'age': 25}
person2 = {'city': 'New York', 'job': 'Engineer'}
문제 4: 주어진 딕셔너리에서 값이 특정 조건을 만족하는 항목만 필터링하는 프로그램을 작성하세요. (나이가 30 이상인 사람만 반환)

python
코드 복사
people = {'Alice': 25, 'Bob': 35, 'Charlie': 30, 'Dave': 20}
문제 5: 주어진 딕셔너리에서 키와 값을 쌍으로 출력하는 프로그램을 작성하세요. (단, 키가 name으로 시작하는 항목만 출력)

python
코드 복사
person = {'name_first': 'Alice', 'name_last': 'Smith', 'age': 25, 'city': 'New York'}
답안
1. 리스트 관련 문제
문제 1: 중복된 요소를 제거한 새로운 리스트를 반환

python
코드 복사
numbers = [1, 2, 3, 4, 4, 5, 2, 6, 1]
unique_numbers = list(set(numbers))
print(unique_numbers)  # [1, 2, 3, 4, 5, 6]
문제 2: 홀수만 골라서 새로운 리스트 반환

python
코드 복사
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
odd_numbers = [num for num in numbers if num % 2 != 0]
print(odd_numbers)  # [1, 3, 5, 7, 9]
문제 3: 각 요소를 제곱한 값을 가진 새로운 리스트

python
코드 복사
numbers = [2, 3, 4, 5]
squared_numbers = [num**2 for num in numbers]
print(squared_numbers)  # [4, 9, 16, 25]
문제 4: 특정 값이 있는지 확인

python
코드 복사
numbers = [10, 20, 30, 40, 50]
contains_3 = 3 in numbers
print(contains_3)  # False
문제 5: 두 번째로 큰 값을 구하는 프로그램

python
코드 복사
numbers = [5, 12, 7, 9, 15, 10]
sorted_numbers = sorted(set(numbers), reverse=True)
print(sorted_numbers[1])  # 12
2. 튜플 관련 문제
문제 1: 짝수만 골라 새로운 튜플 반환

python
코드 복사
numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
even_numbers = tuple(num for num in numbers if num % 2 == 0)
print(even_numbers)  # (2, 4, 6, 8, 10)
문제 2: 요소들의 합 구하기

python
코드 복사
numbers = (5, 10, 15, 20)
sum_numbers = sum(numbers)
print(sum_numbers)  # 50
문제 3: 각 요소를 문자열로 변환하여 새로운 튜플 반환

python
코드 복사
numbers = (1, 2, 3, 4)
string_numbers = tuple(str(num) for num in numbers)
print(string_numbers)  # ('1', '2', '3', '4')
문제 4: 특정 값의 인덱스 반환

python
코드 복사
numbers = (2, 4, 6, 7, 8)
index_of_7 = numbers.index(7)
print(index_of_7)  # 3
문제 5: 두 개의 튜플을 합치기

python
코드 복사
tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
merged_tuple = tuple1 + tuple2
print(merged_tuple)  # (1, 2, 3, 4, 5, 6)
3. 딕셔너리 관련 문제
문제 1: 특정 키가 존재하는지 확인

python
코드 복사
person = {'name': 'Alice', 'age': 25, 'city': 'New York'}
has_age_key = 'age' in person
print(has_age_key)  # True
문제 2: 모든 키의 목록 출력

python
코드 복사
person = {'name': 'Alice', 'age': 25, 'city': 'New York'}
keys = list(person.keys())
print(keys)  # ['name', 'age', 'city']
문제 3: 두 개의 딕셔너리 합치기

python
코드 복사
person1 = {'name': 'Alice', 'age': 25}
person2 = {'city': 'New York', 'job': 'Engineer'}
merged_person = {**person1, **person2}
print(merged_person)  # {'name': 'Alice', 'age': 25, 'city': 'New York', 'job': 'Engineer'}
문제 4: 나이가 30 이상인 사람만 필터링

python
코드 복사
people = {'Alice': 25, 'Bob': 35, 'Charlie': 30, 'Dave': 20}
filtered_people = {name: age for name, age in people.items() if age >= 30}
print(filtered_people)  # {'Bob': 35, 'Charlie': 30}
문제 5: 키가 'name'으로 시작하는 항목만 출력

python
코드 복사
person = {'name_first': 'Alice', 'name_last': 'Smith', 'age': 25, 'city': 'New York'}
filtered_keys = {key: value for key, value in person.items() if key.startswith('name')}
print(filtered_keys)  # {'name_first': 'Alice', 'name_last': 'Smith'}




//반복문&조건문 문제 답안
답안
1. 조건문 관련 문제
문제 1: 회문(palindrome) 판별 프로그램

python
코드 복사
string = "racecar"
if string == string[::-1]:
    print("회문입니다.")
else:
    print("회문이 아닙니다.")
문제 2: 두 점 사이의 거리 계산

python
코드 복사
import math

x1, y1 = 1, 2
x2, y2 = 4, 6
distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

if distance > 10:
    print("Far")
else:
    print("Close")
문제 3: 완전수(perfect number) 판별

python
코드 복사
number = 28
divisors_sum = sum([i for i in range(1, number) if number % i == 0])

if divisors_sum == number:
    print("완전수입니다.")
else:
    print("완전수가 아닙니다.")
문제 4: 윤년(leap year) 판별

python
코드 복사
year = 2024
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    print("윤년입니다.")
else:
    print("윤년이 아닙니다.")
문제 5: 제곱수 판별

python
코드 복사
import math

number = 49
sqrt_number = int(math.sqrt(number))

if sqrt_number * sqrt_number == number:
    print("제곱수입니다.")
else:
    print("제곱수가 아닙니다.")
2. 반복문 관련 문제
문제 1: 소수만 출력하는 프로그램

python
코드 복사
number = 50

for num in range(2, number + 1):
    is_prime = True
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            is_prime = False
            break
    if is_prime:
        print(num)
문제 2: 두 숫자 사이의 짝수 합 구하기

python
코드 복사
start = 10
end = 30
even_sum = 0

for num in range(start, end + 1):
    if num % 2 == 0:
        even_sum += num

print(even_sum)
문제 3: 피보나치 수열 구하기

python
코드 복사
n = 10
a, b = 0, 1

for i in range(n):
    print(a, end=" ")
    a, b = b, a + b
문제 4: 중복된 값을 제외한 고유한 값 출력하기

python
코드 복사
numbers = [1, 2, 3, 3, 4, 5, 1, 6, 7, 7, 8]
unique_numbers = set(numbers)

for num in unique_numbers:
    print(num)
문제 5: 자릿수의 합이 짝수인 숫자 출력하기

python
코드 복사
numbers = [123, 456, 789, 1011]

for num in numbers:
    digit_sum = sum([int(digit) for digit in str(num)])
    if digit_sum % 2 == 0:
        print(num)
