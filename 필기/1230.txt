with문
주로 파일 입출력, 리소스 관리, 데이터베이스 자원관리 등에 사용
블록이 끝나면 파일이나 리소스가 자동으로 닫혀 close( )호출 필요없음

클래스
객체를 만들기 위한 설계도
관련데이터(속성)와 함수(메서드)를 하나로 묶어서 관리가능

생성자:_init_, 객체생성시 자동호출되어 초기화 작업진행
캡슐화: __를 통해 비공개 속성/메서드
상속: 상속을 통해 기존 클래스의 기능을 재사용

//클래스 변수 vs 인스턴스 변수
*클래스 변수: 모든 인스턴스에서 공유하는 값
	     클래스 정의 시 선언된 변수
	     클래스 객체나 인스턴스 객체로부터 참고 가능 
*인스턴스 변수: 그 인스턴스만 사용하는 값
	        생성자 실행 시 self.~로 정의
	        인스턴스 객체로부터 참고 가능


//.py 파일 실행방법
1. 실행버튼
2. terminal에서 python "파일명".py 실행
3. F5키를 눌러 런타임 창에서 파이썬 파일 선택 후 실행

클래스 관련 참고자료
https://devraphy.tistory.com/449
https://www.daleseo.com/python-class-methods-vs-static-methods/

//정적 메서드 vs 클래스 메서드
1. 클래스 메서드 (@classmethod)
정의
클래스 메서드는 @classmethod 데코레이터를 사용하여 정의됩니다. 
클래스 메서드의 첫 번째 매개변수는 항상 cls로, 이를 통해 클래스 자체에 접근할 수 있습니다. 
이는 인스턴스에 종속되지 않고 클래스에 종속된 메서드라는 특징을 가집니다. 
클래스 메서드는 주로 클래스 상태를 변경하거나, 클래스 레벨에서 동작해야 하는 로직을 구현할 때 사용됩니다.

코드 설명
python
코드 복사
@classmethod
def add(cls, a, b):
    return a + b
add 메서드는 cls라는 첫 번째 매개변수를 사용하여 정의됩니다. 
이 cls는 메서드를 호출할 때 클래스 자체를 나타냅니다. 
이 메서드는 클래스 수준에서 호출될 수 있기 때문에, 인스턴스 객체 없이도 호출 가능합니다.
이 메서드는 두 숫자 a와 b를 받아서 더한 결과를 반환합니다. 
cls는 실제로 사용되지 않지만, @classmethod를 사용해 클래스 메서드를 정의한 예시입니다.

사용
python
코드 복사
result1 = MathOperations.add(3, 5)
클래스 이름 MathOperations로 직접 add 메서드를 호출합니다. 이때 cls는 MathOperations 클래스를 가리킵니다.
add(3, 5)는 3과 5를 더한 결과인 8을 반환하고, 이를 result1에 저장합니다.


2. 정적 메서드 (@staticmethod)
정의
정적 메서드는 @staticmethod 데코레이터를 사용하여 정의됩니다. 
정적 메서드는 클래스나 인스턴스와 관계없이 독립적으로 동작하는 메서드입니다. 
즉, 클래스나 인스턴스의 속성에 접근하지 않으며, 주로 특정 작업을 수행하기 위한 함수와 같은 역할을 합니다.

코드 설명
python
코드 복사
@staticmethod
def multiply(a, b):
    return a * b
multiply 메서드는 @staticmethod로 정의됩니다. 이 메서드는 cls나 self와 같은 특별한 첫 번째 매개변수를 받지 않습니다.
multiply는 두 숫자 a와 b를 받아서 곱한 결과를 반환합니다.


사용
python
코드 복사
result2 = MathOperations.multiply(4, 6)
MathOperations 클래스 이름을 사용해 multiply 메서드를 호출합니다. 
multiply 메서드는 인스턴스나 클래스 변수에 접근하지 않기 때문에, 인스턴스 객체 없이도 호출할 수 있습니다.
multiply(4, 6)는 4와 6을 곱한 결과인 24를 반환하고, 이를 result2에 저장합니다.



차이점 요약
클래스 메서드 (@classmethod)

첫 번째 매개변수로 클래스(cls)를 받습니다.
클래스 변수나 클래스 상태에 접근할 수 있습니다.
클래스 수준에서 호출할 수 있습니다.
인스턴스를 생성하지 않고 호출 가능합니다.
정적 메서드 (@staticmethod)

첫 번째 매개변수로 클래스나 인스턴스 객체를 받지 않습니다.
클래스나 인스턴스의 속성에 접근하지 않으며, 독립적인 기능을 수행하는 메서드입니다.
인스턴스 객체 없이 호출 가능합니다.
실행 결과
python
코드 복사
Addition: 8
Multiplication: 24
MathOperations.add(3, 5)는 8을 출력합니다. 이 메서드는 클래스 메서드로, 클래스에서 호출되었습니다.
MathOperations.multiply(4, 6)은 24를 출력합니다. 이 메서드는 정적 메서드로, 클래스와 독립적으로 호출되었습니다.
결론
클래스 메서드와 정적 메서드는 클래스 안에서 동작하지만, 그 사용 용도와 기능에서 차이가 있습니다. 
클래스 메서드는 클래스 상태를 다루고, 
정적 메서드는 클래스나 인스턴스 상태에 관계없이 독립적으로 동작하는 함수를 정의할 때 사용됩니다. 



EDA-탐색적 데이터 분석
데이터 정제하기 위한 과정
(환경이 달라 버전 상이하기 때문에 문제발생 가능)
터미널에
pip install ydata-profiling
pip install setuptools


EDA 관련 참고자료
https://eda-ai-lab.tistory.com/13

